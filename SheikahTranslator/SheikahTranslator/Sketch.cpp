/*
    Name:       SheikahTranslator.ino
    Created:	07/02/18 21:49:11
    Author:     Andrew Gibson
	License:	MIT (see https://github.com/MrHallows/SheikahTranslator/blob/master/LICENSE)
*/

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Find & Replace patterns for reformatting new GLCD font files:
 * NOTE: The last line will need to be done manually!
 * Find:	(\n\s+)(.*?)(,\s+\/\/)
 * Replace:	$1{ $2 }$3
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


//#include <Arduino.h> // Included in "src/OLED_SSD1306.h"
//#include <SPI.h> // Included in "utilities/SRAM_23LC1024.h"
//#include <avr/io.h>

#include "src/OLED_SSD1306.h"
//#include "utilities/EEPROM_24LC64.h"
#include "utilities/SRAM_23LC1024.h"
//Beginning of Auto generated function prototypes by Atmel Studio
//End of Auto generated function prototypes by Atmel Studio




//#define OLED_WIDTH 0x80
//#define OLED_HEIGHT 0x40

/*  OLED         Arduino
	--------------------
    GND..........GND
    VCC..........5V
    D0...........10
    D1...........9
    RES..........13
    DC...........11
	CS...........GND
*/
// OLED Pins
//#define SCL_PIN 10 // D0
//#define SDA_PIN 9  // D1
//#define RST_PIN 13 // RST
//#define DC_PIN  11 // DC

// Buttons
//#define BTN_UP_PIN    5 // D5
//#define BTN_DOWN_PIN  4 // D4
//#define BTN_LEFT_PIN  3 // D3
//#define BTN_RIGHT_PIN 2 // D2
//#define BTN_A_PIN     6 // D6
//#define BTN_B_PIN     7 // D7
//#define BTN_L_PIN // Left Bumper (NOT YET ADDED)
//#define BTN_R_PIN // Right Bumper (NOT YET ADDED)
//#define BTN_START_PIN // (NOT YET ADDED)
//#define BTN_SELECT_PIN // (NOT YET ADDED)


//void OLED_CLS(void); 														// Clear the screen
//void OLED_Set_Pos(unsigned char x, unsigned char y); 						// Set the coordinates
//void OLED_WriteCmd(unsigned char cmd);									// Write command
//void OLED_WriteData(unsigned char data);									// Write data
//void OLED_P6x8Char(unsigned char x, unsigned char y, unsigned char ch); 	// Print char (byte) at the given coordinates
//void OLED_P6x8Str(unsigned char x, unsigned char y, unsigned char ch[]); 	// Print string at the given coordinates (Shard_6x8 font)
//void OLED_P8x8Str(unsigned char x, unsigned char y, unsigned char ch[]); 	// Print string at the given coordinates (Sheikah_8x8 font)
//void OLED_P8x16Str(unsigned char x, unsigned char y, unsigned char ch[]); // Print string at the given coordinates (F8x16 font)
//void OLED_PrintSheikahMap(void); 											// Display the Sheikah Character Map

//void OLED_DrawBMP(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1, unsigned char bmp[]); // Print bitmap image at the given coordinates and size
//void OLED_Fill(unsigned char data); 													// 
//void OLED_PrintValueC(unsigned char x, unsigned char y, char data); 					// 
//void OLED_PrintValueI(unsigned char x, unsigned char y, int data); 					// 
//void OLED_PrintValueF(unsigned char x, unsigned char y, float data, unsigned char num); // 
//void OLED_PrintEdge(void); 																// 
//void OLED_Selector(unsigned char selector_column, unsigned char selector_row); 		// 
//void OLED_PrintLine(void); 																// 
//void OLED_ClearLine(void); 																// 

//void OLED_Set_Selector(unsigned char x, unsigned char y); 								// 
//void OLED_Set_Selector_Pos(int x, int y); 												// 
//void OLED_Clear_Prev_Selector(void); 													// 

//void OLED_Set_Cursor(unsigned char x, unsigned char y); 								// 


/*static const unsigned char Selector[] PROGMEM = { 0x00, 0x7C, 0x38, 0x10, 0x00, 0x00 };
static const unsigned char SelectorBlank[] PROGMEM = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
int selectorPosX = 0;
int selectorPosY = 0;
int prevSelectorPosX;
int prevSelectorPosY;
//char SheikahChars[] PROGMEM = { "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", " ", "." };
//char SheikahChars[28] PROGMEM = { '\65', '\66', '\67', '\68', '\69', '\70', '\71', '\72', '\73', '\74', '\75', '\76', '\77', '\78', '\79', '\80', '\81', '\82', '\83', '\84', '\85', '\86', '\87', '\88', '\89', '\90', '\32', '\46' };
//char SheikahChars[28] PROGMEM = { 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 32, 46 };
char SheikahChars[] PROGMEM = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x20, 0x2E };
unsigned char selectedChar;

static const unsigned char Cursor[] PROGMEM = { 0x40, 0x40, 0x40, 0x40, 0x40, 0x00 };
static const unsigned char CursorBlank[] PROGMEM = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
int cursorPosX = 1;
int cursorPosY = 7;
int prevCursorPosX;
int prevCursorPosY;
*/

/*static const unsigned char HR_Top[] = PROGMEM { 0x02, 0x02, 0x02, 0x02, 0x02, 0x02 };
static const unsigned char HR_Middle[] PROGMEM = { 0x08, 0x08, 0x08, 0x08, 0x08, 0x08 };
static const unsigned char HR_Bottom[] PROGMEM = { 0x40, 0x40, 0x40, 0x40, 0x40, 0x40 };
*/

OLED_SSD1306 OLED;
//EEPROM_24LC64 EEPROM;
//SRAM_23LC1024 SRAM;


/*
const unsigned char F6x8[][6] = {
	{0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // sp
	{0x00, 0x00, 0x00, 0x2f, 0x00, 0x00}, // !
	{0x00, 0x00, 0x07, 0x00, 0x07, 0x00}, // "
	{0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14}, // #
	{0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12}, // $
	{0x00, 0x62, 0x64, 0x08, 0x13, 0x23}, // %
	{0x00, 0x36, 0x49, 0x55, 0x22, 0x50}, // &
	{0x00, 0x00, 0x05, 0x03, 0x00, 0x00}, // '
	{0x00, 0x00, 0x1c, 0x22, 0x41, 0x00}, // (
	{0x00, 0x00, 0x41, 0x22, 0x1c, 0x00}, // )
	{0x00, 0x14, 0x08, 0x3E, 0x08, 0x14}, // *
	{0x00, 0x08, 0x08, 0x3E, 0x08, 0x08}, // +
	{0x00, 0x00, 0x00, 0xA0, 0x60, 0x00}, // ,
	{0x00, 0x08, 0x08, 0x08, 0x08, 0x08}, // -
	{0x00, 0x00, 0x60, 0x60, 0x00, 0x00}, // .
	{0x00, 0x20, 0x10, 0x08, 0x04, 0x02}, // /
	{0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E}, // 0
	{0x00, 0x00, 0x42, 0x7F, 0x40, 0x00}, // 1
	{0x00, 0x42, 0x61, 0x51, 0x49, 0x46}, // 2
	{0x00, 0x21, 0x41, 0x45, 0x4B, 0x31}, // 3
	{0x00, 0x18, 0x14, 0x12, 0x7F, 0x10}, // 4
	{0x00, 0x27, 0x45, 0x45, 0x45, 0x39}, // 5
	{0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30}, // 6
	{0x00, 0x01, 0x71, 0x09, 0x05, 0x03}, // 7
	{0x00, 0x36, 0x49, 0x49, 0x49, 0x36}, // 8
	{0x00, 0x06, 0x49, 0x49, 0x29, 0x1E}, // 9
	{0x00, 0x00, 0x36, 0x36, 0x00, 0x00}, // :
	{0x00, 0x00, 0x56, 0x36, 0x00, 0x00}, // ;
	{0x00, 0x08, 0x14, 0x22, 0x41, 0x00}, // <
	{0x00, 0x14, 0x14, 0x14, 0x14, 0x14}, // =
	{0x00, 0x00, 0x41, 0x22, 0x14, 0x08}, // >
	{0x00, 0x02, 0x01, 0x51, 0x09, 0x06}, // ?
	{0x00, 0x32, 0x49, 0x59, 0x51, 0x3E}, // @
	{0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C}, // A
	{0x00, 0x7F, 0x49, 0x49, 0x49, 0x36}, // B
	{0x00, 0x3E, 0x41, 0x41, 0x41, 0x22}, // C
	{0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C}, // D
	{0x00, 0x7F, 0x49, 0x49, 0x49, 0x41}, // E
	{0x00, 0x7F, 0x09, 0x09, 0x09, 0x01}, // F
	{0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A}, // G
	{0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F}, // H
	{0x00, 0x00, 0x41, 0x7F, 0x41, 0x00}, // I
	{0x00, 0x20, 0x40, 0x41, 0x3F, 0x01}, // J
	{0x00, 0x7F, 0x08, 0x14, 0x22, 0x41}, // K
	{0x00, 0x7F, 0x40, 0x40, 0x40, 0x40}, // L
	{0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F}, // M
	{0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F}, // N
	{0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E}, // O
	{0x00, 0x7F, 0x09, 0x09, 0x09, 0x06}, // P
	{0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E}, // Q
	{0x00, 0x7F, 0x09, 0x19, 0x29, 0x46}, // R
	{0x00, 0x46, 0x49, 0x49, 0x49, 0x31}, // S
	{0x00, 0x01, 0x01, 0x7F, 0x01, 0x01}, // T
	{0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F}, // U
	{0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F}, // V
	{0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F}, // W
	{0x00, 0x63, 0x14, 0x08, 0x14, 0x63}, // X
	{0x00, 0x07, 0x08, 0x70, 0x08, 0x07}, // Y
	{0x00, 0x61, 0x51, 0x49, 0x45, 0x43}, // Z
	{0x00, 0x00, 0x7F, 0x41, 0x41, 0x00}, // [ 91
	{0x00, 0x02, 0x04, 0x08, 0x10, 0x20}, // \92
	{0x00, 0x00, 0x41, 0x41, 0x7F, 0x00}, // ]
	{0x00, 0x04, 0x02, 0x01, 0x02, 0x04}, // ^
	{0x00, 0x40, 0x40, 0x40, 0x40, 0x40}, // _
	{0x00, 0x00, 0x01, 0x02, 0x04, 0x00}, // '
	{0x00, 0x20, 0x54, 0x54, 0x54, 0x78}, // a
	{0x00, 0x7F, 0x48, 0x44, 0x44, 0x38}, // b
	{0x00, 0x38, 0x44, 0x44, 0x44, 0x20}, // c
	{0x00, 0x38, 0x44, 0x44, 0x48, 0x7F}, // d
	{0x00, 0x38, 0x54, 0x54, 0x54, 0x18}, // e
	{0x00, 0x08, 0x7E, 0x09, 0x01, 0x02}, // f
	{0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C}, // g
	{0x00, 0x7F, 0x08, 0x04, 0x04, 0x78}, // h
	{0x00, 0x00, 0x44, 0x7D, 0x40, 0x00}, // i
	{0x00, 0x40, 0x80, 0x84, 0x7D, 0x00}, // j
	{0x00, 0x7F, 0x10, 0x28, 0x44, 0x00}, // k
	{0x00, 0x00, 0x41, 0x7F, 0x40, 0x00}, // l
	{0x00, 0x7C, 0x04, 0x18, 0x04, 0x78}, // m
	{0x00, 0x7C, 0x08, 0x04, 0x04, 0x78}, // n
	{0x00, 0x38, 0x44, 0x44, 0x44, 0x38}, // o
	{0x00, 0xFC, 0x24, 0x24, 0x24, 0x18}, // p
	{0x00, 0x18, 0x24, 0x24, 0x18, 0xFC}, // q
	{0x00, 0x7C, 0x08, 0x04, 0x04, 0x08}, // r
	{0x00, 0x48, 0x54, 0x54, 0x54, 0x20}, // s
	{0x00, 0x04, 0x3F, 0x44, 0x40, 0x20}, // t
	{0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C}, // u
	{0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C}, // v
	{0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C}, // w
	{0x00, 0x44, 0x28, 0x10, 0x28, 0x44}, // x
	{0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C}, // y
	{0x00, 0x44, 0x64, 0x54, 0x4C, 0x44}, // z
	{0x14, 0x14, 0x14, 0x14, 0x14, 0x14}  // horiz lines
};
*/

/*const unsigned char F8X16[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0
	0x00, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x30, 0x00, 0x00, 0x00, //!1
	0x00, 0x10, 0x0C, 0x06, 0x10, 0x0C, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //"2
	0x40, 0xC0, 0x78, 0x40, 0xC0, 0x78, 0x40, 0x00, 0x04, 0x3F, 0x04, 0x04, 0x3F, 0x04, 0x04, 0x00, //#3
	0x00, 0x70, 0x88, 0xFC, 0x08, 0x30, 0x00, 0x00, 0x00, 0x18, 0x20, 0xFF, 0x21, 0x1E, 0x00, 0x00, //$4
	0xF0, 0x08, 0xF0, 0x00, 0xE0, 0x18, 0x00, 0x00, 0x00, 0x21, 0x1C, 0x03, 0x1E, 0x21, 0x1E, 0x00, //%5
	0x00, 0xF0, 0x08, 0x88, 0x70, 0x00, 0x00, 0x00, 0x1E, 0x21, 0x23, 0x24, 0x19, 0x27, 0x21, 0x10, //&6
	0x10, 0x16, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //'7
	0x00, 0x00, 0x00, 0xE0, 0x18, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x07, 0x18, 0x20, 0x40, 0x00, //(8
	0x00, 0x02, 0x04, 0x18, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x40, 0x20, 0x18, 0x07, 0x00, 0x00, 0x00, //)9
	0x40, 0x40, 0x80, 0xF0, 0x80, 0x40, 0x40, 0x00, 0x02, 0x02, 0x01, 0x0F, 0x01, 0x02, 0x02, 0x00, //*10
	0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x1F, 0x01, 0x01, 0x01, 0x00, //+11
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xB0, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, //,12
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, //-13
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, //.14
	0x00, 0x00, 0x00, 0x00, 0x80, 0x60, 0x18, 0x04, 0x00, 0x60, 0x18, 0x06, 0x01, 0x00, 0x00, 0x00, ///15
	0x00, 0xE0, 0x10, 0x08, 0x08, 0x10, 0xE0, 0x00, 0x00, 0x0F, 0x10, 0x20, 0x20, 0x10, 0x0F, 0x00, //016
	0x00, 0x10, 0x10, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x3F, 0x20, 0x20, 0x00, 0x00, //117
	0x00, 0x70, 0x08, 0x08, 0x08, 0x88, 0x70, 0x00, 0x00, 0x30, 0x28, 0x24, 0x22, 0x21, 0x30, 0x00, //218
	0x00, 0x30, 0x08, 0x88, 0x88, 0x48, 0x30, 0x00, 0x00, 0x18, 0x20, 0x20, 0x20, 0x11, 0x0E, 0x00, //319
	0x00, 0x00, 0xC0, 0x20, 0x10, 0xF8, 0x00, 0x00, 0x00, 0x07, 0x04, 0x24, 0x24, 0x3F, 0x24, 0x00, //420
	0x00, 0xF8, 0x08, 0x88, 0x88, 0x08, 0x08, 0x00, 0x00, 0x19, 0x21, 0x20, 0x20, 0x11, 0x0E, 0x00, //521
	0x00, 0xE0, 0x10, 0x88, 0x88, 0x18, 0x00, 0x00, 0x00, 0x0F, 0x11, 0x20, 0x20, 0x11, 0x0E, 0x00, //622
	0x00, 0x38, 0x08, 0x08, 0xC8, 0x38, 0x08, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, //723
	0x00, 0x70, 0x88, 0x08, 0x08, 0x88, 0x70, 0x00, 0x00, 0x1C, 0x22, 0x21, 0x21, 0x22, 0x1C, 0x00, //824
	0x00, 0xE0, 0x10, 0x08, 0x08, 0x10, 0xE0, 0x00, 0x00, 0x00, 0x31, 0x22, 0x22, 0x11, 0x0F, 0x00, //925
	0x00, 0x00, 0x00, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00, //:26
	0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x60, 0x00, 0x00, 0x00, 0x00, //;27
	0x00, 0x00, 0x80, 0x40, 0x20, 0x10, 0x08, 0x00, 0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, //<28
	0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x00, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, //=29
	0x00, 0x08, 0x10, 0x20, 0x40, 0x80, 0x00, 0x00, 0x00, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01, 0x00, //>30
	0x00, 0x70, 0x48, 0x08, 0x08, 0x08, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x30, 0x36, 0x01, 0x00, 0x00, //?31
	0xC0, 0x30, 0xC8, 0x28, 0xE8, 0x10, 0xE0, 0x00, 0x07, 0x18, 0x27, 0x24, 0x23, 0x14, 0x0B, 0x00, //@32
	0x00, 0x00, 0xC0, 0x38, 0xE0, 0x00, 0x00, 0x00, 0x20, 0x3C, 0x23, 0x02, 0x02, 0x27, 0x38, 0x20, //A33
	0x08, 0xF8, 0x88, 0x88, 0x88, 0x70, 0x00, 0x00, 0x20, 0x3F, 0x20, 0x20, 0x20, 0x11, 0x0E, 0x00, //B34
	0xC0, 0x30, 0x08, 0x08, 0x08, 0x08, 0x38, 0x00, 0x07, 0x18, 0x20, 0x20, 0x20, 0x10, 0x08, 0x00, //C35
	0x08, 0xF8, 0x08, 0x08, 0x08, 0x10, 0xE0, 0x00, 0x20, 0x3F, 0x20, 0x20, 0x20, 0x10, 0x0F, 0x00, //D36
	0x08, 0xF8, 0x88, 0x88, 0xE8, 0x08, 0x10, 0x00, 0x20, 0x3F, 0x20, 0x20, 0x23, 0x20, 0x18, 0x00, //E37
	0x08, 0xF8, 0x88, 0x88, 0xE8, 0x08, 0x10, 0x00, 0x20, 0x3F, 0x20, 0x00, 0x03, 0x00, 0x00, 0x00, //F38
	0xC0, 0x30, 0x08, 0x08, 0x08, 0x38, 0x00, 0x00, 0x07, 0x18, 0x20, 0x20, 0x22, 0x1E, 0x02, 0x00, //G39
	0x08, 0xF8, 0x08, 0x00, 0x00, 0x08, 0xF8, 0x08, 0x20, 0x3F, 0x21, 0x01, 0x01, 0x21, 0x3F, 0x20, //H40
	0x00, 0x08, 0x08, 0xF8, 0x08, 0x08, 0x00, 0x00, 0x00, 0x20, 0x20, 0x3F, 0x20, 0x20, 0x00, 0x00, //I41
	0x00, 0x00, 0x08, 0x08, 0xF8, 0x08, 0x08, 0x00, 0xC0, 0x80, 0x80, 0x80, 0x7F, 0x00, 0x00, 0x00, //J42
	0x08, 0xF8, 0x88, 0xC0, 0x28, 0x18, 0x08, 0x00, 0x20, 0x3F, 0x20, 0x01, 0x26, 0x38, 0x20, 0x00, //K43
	0x08, 0xF8, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x3F, 0x20, 0x20, 0x20, 0x20, 0x30, 0x00, //L44
	0x08, 0xF8, 0xF8, 0x00, 0xF8, 0xF8, 0x08, 0x00, 0x20, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x20, 0x00, //M45
	0x08, 0xF8, 0x30, 0xC0, 0x00, 0x08, 0xF8, 0x08, 0x20, 0x3F, 0x20, 0x00, 0x07, 0x18, 0x3F, 0x00, //N46
	0xE0, 0x10, 0x08, 0x08, 0x08, 0x10, 0xE0, 0x00, 0x0F, 0x10, 0x20, 0x20, 0x20, 0x10, 0x0F, 0x00, //O47
	0x08, 0xF8, 0x08, 0x08, 0x08, 0x08, 0xF0, 0x00, 0x20, 0x3F, 0x21, 0x01, 0x01, 0x01, 0x00, 0x00, //P48
	0xE0, 0x10, 0x08, 0x08, 0x08, 0x10, 0xE0, 0x00, 0x0F, 0x18, 0x24, 0x24, 0x38, 0x50, 0x4F, 0x00, //Q49
	0x08, 0xF8, 0x88, 0x88, 0x88, 0x88, 0x70, 0x00, 0x20, 0x3F, 0x20, 0x00, 0x03, 0x0C, 0x30, 0x20, //R50
	0x00, 0x70, 0x88, 0x08, 0x08, 0x08, 0x38, 0x00, 0x00, 0x38, 0x20, 0x21, 0x21, 0x22, 0x1C, 0x00, //S51
	0x18, 0x08, 0x08, 0xF8, 0x08, 0x08, 0x18, 0x00, 0x00, 0x00, 0x20, 0x3F, 0x20, 0x00, 0x00, 0x00, //T52
	0x08, 0xF8, 0x08, 0x00, 0x00, 0x08, 0xF8, 0x08, 0x00, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x00, //U53
	0x08, 0x78, 0x88, 0x00, 0x00, 0xC8, 0x38, 0x08, 0x00, 0x00, 0x07, 0x38, 0x0E, 0x01, 0x00, 0x00, //V54
	0xF8, 0x08, 0x00, 0xF8, 0x00, 0x08, 0xF8, 0x00, 0x03, 0x3C, 0x07, 0x00, 0x07, 0x3C, 0x03, 0x00, //W55
	0x08, 0x18, 0x68, 0x80, 0x80, 0x68, 0x18, 0x08, 0x20, 0x30, 0x2C, 0x03, 0x03, 0x2C, 0x30, 0x20, //X56
	0x08, 0x38, 0xC8, 0x00, 0xC8, 0x38, 0x08, 0x00, 0x00, 0x00, 0x20, 0x3F, 0x20, 0x00, 0x00, 0x00, //Y57
	0x10, 0x08, 0x08, 0x08, 0xC8, 0x38, 0x08, 0x00, 0x20, 0x38, 0x26, 0x21, 0x20, 0x20, 0x18, 0x00, //Z58
	0x00, 0x00, 0x00, 0xFE, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x40, 0x40, 0x40, 0x00, //[59
	0x00, 0x0C, 0x30, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x06, 0x38, 0xC0, 0x00, //\60
	0x00, 0x02, 0x02, 0x02, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x40, 0x7F, 0x00, 0x00, 0x00, //]61
	0x00, 0x00, 0x04, 0x02, 0x02, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //^62
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, //_63
	0x00, 0x02, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //`64
	0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x19, 0x24, 0x22, 0x22, 0x22, 0x3F, 0x20, //a65
	0x08, 0xF8, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x11, 0x20, 0x20, 0x11, 0x0E, 0x00, //b66
	0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x0E, 0x11, 0x20, 0x20, 0x20, 0x11, 0x00, //c67
	0x00, 0x00, 0x00, 0x80, 0x80, 0x88, 0xF8, 0x00, 0x00, 0x0E, 0x11, 0x20, 0x20, 0x10, 0x3F, 0x20, //d68
	0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x1F, 0x22, 0x22, 0x22, 0x22, 0x13, 0x00, //e69
	0x00, 0x80, 0x80, 0xF0, 0x88, 0x88, 0x88, 0x18, 0x00, 0x20, 0x20, 0x3F, 0x20, 0x20, 0x00, 0x00, //f70
	0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x6B, 0x94, 0x94, 0x94, 0x93, 0x60, 0x00, //g71
	0x08, 0xF8, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x20, 0x3F, 0x21, 0x00, 0x00, 0x20, 0x3F, 0x20, //h72
	0x00, 0x80, 0x98, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x3F, 0x20, 0x20, 0x00, 0x00, //i73
	0x00, 0x00, 0x00, 0x80, 0x98, 0x98, 0x00, 0x00, 0x00, 0xC0, 0x80, 0x80, 0x80, 0x7F, 0x00, 0x00, //j74
	0x08, 0xF8, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x20, 0x3F, 0x24, 0x02, 0x2D, 0x30, 0x20, 0x00, //k75
	0x00, 0x08, 0x08, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x3F, 0x20, 0x20, 0x00, 0x00, //l76
	0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x20, 0x3F, 0x20, 0x00, 0x3F, 0x20, 0x00, 0x3F, //m77
	0x80, 0x80, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x20, 0x3F, 0x21, 0x00, 0x00, 0x20, 0x3F, 0x20, //n78
	0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x00, //o79
	0x80, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0xFF, 0xA1, 0x20, 0x20, 0x11, 0x0E, 0x00, //p80
	0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x0E, 0x11, 0x20, 0x20, 0xA0, 0xFF, 0x80, //q81
	0x80, 0x80, 0x80, 0x00, 0x80, 0x80, 0x80, 0x00, 0x20, 0x20, 0x3F, 0x21, 0x20, 0x00, 0x01, 0x00, //r82
	0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x33, 0x24, 0x24, 0x24, 0x24, 0x19, 0x00, //s83
	0x00, 0x80, 0x80, 0xE0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x20, 0x20, 0x00, 0x00, //t84
	0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x1F, 0x20, 0x20, 0x20, 0x10, 0x3F, 0x20, //unsigned char5
	0x80, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x01, 0x0E, 0x30, 0x08, 0x06, 0x01, 0x00, //v86
	0x80, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x80, 0x0F, 0x30, 0x0C, 0x03, 0x0C, 0x30, 0x0F, 0x00, //w87
	0x00, 0x80, 0x80, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x20, 0x31, 0x2E, 0x0E, 0x31, 0x20, 0x00, //x88
	0x80, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x81, 0x8E, 0x70, 0x18, 0x06, 0x01, 0x00, //y89
	0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x21, 0x30, 0x2C, 0x22, 0x21, 0x30, 0x00, //z90
	0x00, 0x00, 0x00, 0x00, 0x80, 0x7C, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x40, 0x40, //{91
	0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, //|92
	0x00, 0x02, 0x02, 0x7C, 0x80, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x3F, 0x00, 0x00, 0x00, 0x00, //}93
	0x00, 0x06, 0x01, 0x01, 0x02, 0x02, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //~94
};
*/



/* *
 * Medianoid
 */
/*
const unsigned char F6x8[][6] = { // Medianoid6x8[]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // Code for char
	{ 0x5E, 0x00, 0x00, 0x00, 0x00, 0x00 }, // Code for char !
	{ 0x06, 0x00, 0x06, 0x00, 0x00, 0x00 }, // Code for char "
	{ 0x28, 0x7C, 0x28, 0x7C, 0x28, 0x00 }, // Code for char #
	{ 0x5C, 0x54, 0x7E, 0x54, 0x74, 0x00 }, // Code for char $
	{ 0x44, 0x20, 0x10, 0x08, 0x44, 0x00 }, // Code for char %
	{ 0x70, 0x4E, 0x4A, 0x52, 0x2E, 0x40 }, // Code for char &
	{ 0x06, 0x00, 0x00, 0x00, 0x00, 0x00 }, // Code for char '
	{ 0x7E, 0x42, 0x42, 0x00, 0x00, 0x00 }, // Code for char (
	{ 0x42, 0x42, 0x7E, 0x00, 0x00, 0x00 }, // Code for char )
	{ 0x10, 0x10, 0x6C, 0x10, 0x10, 0x00 }, // Code for char *
	{ 0x10, 0x10, 0x7C, 0x10, 0x10, 0x00 }, // Code for char +
	{ 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00 }, // Code for char ,
	{ 0x10, 0x10, 0x10, 0x00, 0x00, 0x00 }, // Code for char -
	{ 0x40, 0x00, 0x00, 0x00, 0x00, 0x00 }, // Code for char .
	{ 0x60, 0x18, 0x06, 0x00, 0x00, 0x00 }, // Code for char /
	{ 0x7E, 0x42, 0x42, 0x42, 0x7E, 0x00 }, // Code for char 0
	{ 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00 }, // Code for char 1
	{ 0x7A, 0x4A, 0x4A, 0x4A, 0x4E, 0x00 }, // Code for char 2
	{ 0x42, 0x4A, 0x4A, 0x4A, 0x7E, 0x00 }, // Code for char 3
	{ 0x3E, 0x22, 0x22, 0x7E, 0x20, 0x00 }, // Code for char 4
	{ 0x4E, 0x4A, 0x4A, 0x4A, 0x7A, 0x00 }, // Code for char 5
	{ 0x7E, 0x4A, 0x4A, 0x4A, 0x7A, 0x00 }, // Code for char 6
	{ 0x02, 0x02, 0x02, 0x02, 0x7E, 0x00 }, // Code for char 7
	{ 0x7E, 0x4A, 0x4A, 0x4A, 0x7E, 0x00 }, // Code for char 8
	{ 0x0E, 0x0A, 0x0A, 0x0A, 0x7E, 0x00 }, // Code for char 9
	{ 0x28, 0x00, 0x00, 0x00, 0x00, 0x00 }, // Code for char :
	{ 0x68, 0x00, 0x00, 0x00, 0x00, 0x00 }, // Code for char ;
	{ 0x10, 0x28, 0x44, 0x00, 0x00, 0x00 }, // Code for char <
	{ 0x28, 0x28, 0x28, 0x00, 0x00, 0x00 }, // Code for char =
	{ 0x44, 0x28, 0x10, 0x00, 0x00, 0x00 }, // Code for char >
	{ 0x02, 0x5A, 0x0A, 0x0A, 0x0E, 0x00 }, // Code for char ?
	{ 0x7E, 0x42, 0x5A, 0x52, 0x1E, 0x00 }, // Code for char @
	{ 0x7E, 0x0A, 0x0A, 0x0A, 0x7E, 0x00 }, // Code for char A
	{ 0x7E, 0x4A, 0x4A, 0x4A, 0x76, 0x00 }, // Code for char B
	{ 0x7E, 0x42, 0x42, 0x42, 0x42, 0x00 }, // Code for char C
	{ 0x7E, 0x42, 0x42, 0x42, 0x7C, 0x00 }, // Code for char D
	{ 0x7E, 0x4A, 0x4A, 0x4A, 0x42, 0x00 }, // Code for char E
	{ 0x7E, 0x0A, 0x0A, 0x0A, 0x02, 0x00 }, // Code for char F
	{ 0x7E, 0x42, 0x4A, 0x4A, 0x7A, 0x00 }, // Code for char G
	{ 0x7E, 0x08, 0x08, 0x08, 0x7E, 0x00 }, // Code for char H
	{ 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00 }, // Code for char I
	{ 0x42, 0x42, 0x42, 0x7E, 0x00, 0x00 }, // Code for char J
	{ 0x7E, 0x08, 0x08, 0x14, 0x62, 0x00 }, // Code for char K
	{ 0x7E, 0x40, 0x40, 0x40, 0x40, 0x00 }, // Code for char L
	{ 0x7E, 0x04, 0x18, 0x04, 0x7E, 0x00 }, // Code for char M
	{ 0x7E, 0x04, 0x08, 0x10, 0x7E, 0x00 }, // Code for char N
	{ 0x7E, 0x42, 0x42, 0x42, 0x7E, 0x00 }, // Code for char O
	{ 0x7E, 0x0A, 0x0A, 0x0A, 0x0E, 0x00 }, // Code for char P
	{ 0x7E, 0x42, 0x52, 0x62, 0x7E, 0x00 }, // Code for char Q
	{ 0x7E, 0x0A, 0x0A, 0x0A, 0x76, 0x00 }, // Code for char R
	{ 0x4E, 0x4A, 0x4A, 0x4A, 0x7A, 0x00 }, // Code for char S
	{ 0x02, 0x02, 0x7E, 0x02, 0x02, 0x00 }, // Code for char T
	{ 0x7E, 0x40, 0x40, 0x40, 0x7E, 0x00 }, // Code for char U
	{ 0x0E, 0x30, 0x40, 0x30, 0x0E, 0x00 }, // Code for char V
	{ 0x7E, 0x40, 0x70, 0x40, 0x7E, 0x00 }, // Code for char W
	{ 0x62, 0x14, 0x08, 0x14, 0x62, 0x00 }, // Code for char X
	{ 0x02, 0x04, 0x78, 0x04, 0x02, 0x00 }, // Code for char Y
	{ 0x42, 0x62, 0x52, 0x4A, 0x46, 0x00 }, // Code for char Z
	{ 0x7E, 0x42, 0x00, 0x00, 0x00, 0x00 }, // Code for char [
	{ 0x06, 0x18, 0x60, 0x00, 0x00, 0x00 }, // Code for char BackSlash
	{ 0x42, 0x42, 0x7E, 0x00, 0x00, 0x00 }, // Code for char ]
	{ 0x04, 0x02, 0x04, 0x00, 0x00, 0x00 }, // Code for char ^
	{ 0x40, 0x40, 0x40, 0x40, 0x40, 0x00 }, // Code for char _
	{ 0x02, 0x04, 0x00, 0x00, 0x00, 0x00 }, // Code for char `
	{ 0x7C, 0x44, 0x44, 0x44, 0x7C, 0x40 }, // Code for char a
	{ 0x7F, 0x44, 0x44, 0x44, 0x7C, 0x00 }, // Code for char b
	{ 0x7C, 0x44, 0x44, 0x44, 0x44, 0x00 }, // Code for char c
	{ 0x7C, 0x44, 0x44, 0x44, 0x7F, 0x00 }, // Code for char d
	{ 0x7C, 0x54, 0x54, 0x54, 0x5C, 0x00 }, // Code for char e
	{ 0xFC, 0x24, 0x24, 0x24, 0x04, 0x00 }, // Code for char f
	{ 0x7C, 0x44, 0x44, 0x44, 0xFC, 0x00 }, // Code for char g
	{ 0x7F, 0x04, 0x04, 0x04, 0x7C, 0x00 }, // Code for char h
	{ 0x7D, 0x00, 0x00, 0x00, 0x00, 0x00 }, // Code for char i
	{ 0x00, 0xFD, 0x00, 0x00, 0x00, 0x00 }, // Code for char j
	{ 0x7F, 0x10, 0x28, 0x44, 0x00, 0x00 }, // Code for char k
	{ 0x7F, 0x40, 0x00, 0x00, 0x00, 0x00 }, // Code for char l
	{ 0x7C, 0x04, 0x1C, 0x04, 0x7C, 0x00 }, // Code for char m
	{ 0x7C, 0x04, 0x04, 0x04, 0x7C, 0x00 }, // Code for char n
	{ 0x7C, 0x44, 0x44, 0x44, 0x7C, 0x00 }, // Code for char o
	{ 0xFC, 0x44, 0x44, 0x44, 0x7C, 0x00 }, // Code for char p
	{ 0x7C, 0x44, 0x44, 0x44, 0xFC, 0x00 }, // Code for char q
	{ 0x7C, 0x04, 0x04, 0x04, 0x04, 0x00 }, // Code for char r
	{ 0x5C, 0x54, 0x54, 0x54, 0x74, 0x00 }, // Code for char s
	{ 0x7F, 0x48, 0x48, 0x40, 0x00, 0x00 }, // Code for char t
	{ 0x7C, 0x40, 0x40, 0x40, 0x7C, 0x00 }, // Code for char u
	{ 0x0C, 0x30, 0x40, 0x30, 0x0C, 0x00 }, // Code for char v
	{ 0x7C, 0x40, 0x30, 0x40, 0x7C, 0x00 }, // Code for char w
	{ 0x44, 0x28, 0x10, 0x28, 0x44, 0x00 }, // Code for char x
	{ 0x7C, 0x40, 0x40, 0x40, 0xFC, 0x00 }, // Code for char y
	{ 0x44, 0x64, 0x54, 0x4C, 0x44, 0x00 }, // Code for char z
	{ 0x18, 0x66, 0x42, 0x00, 0x00, 0x00 }, // Code for char {
	{ 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00 }, // Code for char |
	{ 0x42, 0x66, 0x18, 0x00, 0x00, 0x00 }, // Code for char }
	{ 0x10, 0x08, 0x08, 0x10, 0x08, 0x00 }, // Code for char ~
	{ 0x7E, 0x7E, 0x00, 0x00, 0x00, 0x00 }  // Code for char 
};
* /

//GLCD FontName : Gasara6x8
//GLCD FontSize : 6 x 8
/*
const unsigned char F6x8[][6] = { // Gasara6x8[]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // Code for char
	{ 0x5C, 0x00, 0x00, 0x00, 0x00, 0x00 }, // Code for char !
	{ 0x0C, 0x00, 0x0C, 0x00, 0x00, 0x00 }, // Code for char "
	{ 0x28, 0x7C, 0x28, 0x7C, 0x28, 0x00 }, // Code for char #
	{ 0x5C, 0x74, 0x5E, 0x74, 0x00, 0x00 }, // Code for char $
	{ 0x64, 0x10, 0x4C, 0x00, 0x00, 0x00 }, // Code for char %
	{ 0x70, 0x4C, 0x5C, 0x6C, 0x20, 0x00 }, // Code for char &
	{ 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00 }, // Code for char '
	{ 0x38, 0x44, 0x00, 0x00, 0x00, 0x00 }, // Code for char (
	{ 0x44, 0x38, 0x00, 0x00, 0x00, 0x00 }, // Code for char )
	{ 0x10, 0x38, 0x10, 0x00, 0x00, 0x00 }, // Code for char *
	{ 0x10, 0x10, 0x7C, 0x10, 0x10, 0x00 }, // Code for char +
	{ 0x60, 0x00, 0x00, 0x00, 0x00, 0x00 }, // Code for char ,
	{ 0x10, 0x10, 0x10, 0x10, 0x00, 0x00 }, // Code for char -
	{ 0x40, 0x00, 0x00, 0x00, 0x00, 0x00 }, // Code for char .
	{ 0x40, 0x20, 0x10, 0x08, 0x04, 0x00 }, // Code for char /
	{ 0x38, 0x44, 0x44, 0x38, 0x00, 0x00 }, // Code for char 0
	{ 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00 }, // Code for char 1
	{ 0x44, 0x64, 0x54, 0x48, 0x00, 0x00 }, // Code for char 2
	{ 0x44, 0x54, 0x54, 0x7C, 0x00, 0x00 }, // Code for char 3
	{ 0x3C, 0x20, 0x70, 0x20, 0x00, 0x00 }, // Code for char 4
	{ 0x5C, 0x54, 0x54, 0x34, 0x00, 0x00 }, // Code for char 5
	{ 0x7C, 0x50, 0x50, 0x70, 0x00, 0x00 }, // Code for char 6
	{ 0x44, 0x24, 0x14, 0x0C, 0x00, 0x00 }, // Code for char 7
	{ 0x6C, 0x54, 0x54, 0x6C, 0x00, 0x00 }, // Code for char 8
	{ 0x1C, 0x14, 0x14, 0x7C, 0x00, 0x00 }, // Code for char 9
	{ 0x28, 0x00, 0x00, 0x00, 0x00, 0x00 }, // Code for char :
	{ 0x68, 0x00, 0x00, 0x00, 0x00, 0x00 }, // Code for char ;
	{ 0x10, 0x28, 0x44, 0x00, 0x00, 0x00 }, // Code for char <
	{ 0x28, 0x28, 0x28, 0x28, 0x00, 0x00 }, // Code for char =
	{ 0x44, 0x28, 0x10, 0x00, 0x00, 0x00 }, // Code for char >
	{ 0x04, 0x54, 0x14, 0x1C, 0x00, 0x00 }, // Code for char ?
	{ 0x3C, 0x42, 0x5A, 0x52, 0x5C, 0x00 }, // Code for char @
	{ 0x7C, 0x14, 0x14, 0x78, 0x00, 0x00 }, // Code for char A
	{ 0x7C, 0x54, 0x54, 0x7C, 0x00, 0x00 }, // Code for char B
	{ 0x78, 0x44, 0x44, 0x44, 0x00, 0x00 }, // Code for char C
	{ 0x7C, 0x44, 0x44, 0x78, 0x00, 0x00 }, // Code for char D
	{ 0x7C, 0x54, 0x54, 0x44, 0x00, 0x00 }, // Code for char E
	{ 0x7C, 0x14, 0x14, 0x04, 0x00, 0x00 }, // Code for char F
	{ 0x7C, 0x44, 0x54, 0x34, 0x00, 0x00 }, // Code for char G
	{ 0x7C, 0x10, 0x10, 0x7C, 0x00, 0x00 }, // Code for char H
	{ 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00 }, // Code for char I
	{ 0x44, 0x44, 0x3C, 0x00, 0x00, 0x00 }, // Code for char J
	{ 0x7C, 0x10, 0x38, 0x44, 0x00, 0x00 }, // Code for char K
	{ 0x7C, 0x40, 0x40, 0x40, 0x00, 0x00 }, // Code for char L
	{ 0x7C, 0x0C, 0x10, 0x0C, 0x7C, 0x00 }, // Code for char M
	{ 0x7C, 0x08, 0x10, 0x20, 0x7C, 0x00 }, // Code for char N
	{ 0x7C, 0x44, 0x44, 0x7C, 0x00, 0x00 }, // Code for char O
	{ 0x7C, 0x14, 0x14, 0x1C, 0x00, 0x00 }, // Code for char P
	{ 0x7C, 0x44, 0x54, 0x7C, 0x20, 0x00 }, // Code for char Q
	{ 0x7C, 0x14, 0x14, 0x6C, 0x00, 0x00 }, // Code for char R
	{ 0x5C, 0x54, 0x54, 0x74, 0x00, 0x00 }, // Code for char S
	{ 0x04, 0x7C, 0x04, 0x04, 0x00, 0x00 }, // Code for char T
	{ 0x7C, 0x40, 0x40, 0x7C, 0x00, 0x00 }, // Code for char U
	{ 0x1C, 0x60, 0x60, 0x1C, 0x00, 0x00 }, // Code for char V
	{ 0x7C, 0x60, 0x10, 0x60, 0x7C, 0x00 }, // Code for char W
	{ 0x4C, 0x30, 0x30, 0x4C, 0x00, 0x00 }, // Code for char X
	{ 0x0C, 0x70, 0x0C, 0x00, 0x00, 0x00 }, // Code for char Y
	{ 0x44, 0x64, 0x54, 0x4C, 0x00, 0x00 }, // Code for char Z
	{ 0x7C, 0x44, 0x00, 0x00, 0x00, 0x00 }, // Code for char [
	{ 0x04, 0x08, 0x10, 0x20, 0x40, 0x00 }, // Code for char BackSlash
	{ 0x44, 0x7C, 0x00, 0x00, 0x00, 0x00 }, // Code for char ]
	{ 0x10, 0x08, 0x04, 0x08, 0x10, 0x00 }, // Code for char ^
	{ 0x40, 0x40, 0x40, 0x40, 0x00, 0x00 }, // Code for char _
	{ 0x04, 0x08, 0x00, 0x00, 0x00, 0x00 }, // Code for char `
	{ 0x7C, 0x14, 0x14, 0x78, 0x00, 0x00 }, // Code for char a
	{ 0x7C, 0x54, 0x54, 0x7C, 0x00, 0x00 }, // Code for char b
	{ 0x78, 0x44, 0x44, 0x44, 0x00, 0x00 }, // Code for char c
	{ 0x7C, 0x44, 0x44, 0x78, 0x00, 0x00 }, // Code for char d
	{ 0x7C, 0x54, 0x54, 0x44, 0x00, 0x00 }, // Code for char e
	{ 0x7C, 0x14, 0x14, 0x04, 0x00, 0x00 }, // Code for char f
	{ 0x7C, 0x44, 0x54, 0x34, 0x00, 0x00 }, // Code for char g
	{ 0x7C, 0x10, 0x10, 0x7C, 0x00, 0x00 }, // Code for char h
	{ 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00 }, // Code for char i
	{ 0x44, 0x44, 0x3C, 0x00, 0x00, 0x00 }, // Code for char j
	{ 0x7C, 0x10, 0x38, 0x44, 0x00, 0x00 }, // Code for char k
	{ 0x7C, 0x40, 0x40, 0x40, 0x00, 0x00 }, // Code for char l
	{ 0x7C, 0x0C, 0x10, 0x0C, 0x7C, 0x00 }, // Code for char m
	{ 0x7C, 0x08, 0x10, 0x20, 0x7C, 0x00 }, // Code for char n
	{ 0x7C, 0x44, 0x44, 0x7C, 0x00, 0x00 }, // Code for char o
	{ 0x7C, 0x14, 0x14, 0x1C, 0x00, 0x00 }, // Code for char p
	{ 0x7C, 0x44, 0x54, 0x7C, 0x20, 0x00 }, // Code for char q
	{ 0x7C, 0x14, 0x14, 0x6C, 0x00, 0x00 }, // Code for char r
	{ 0x5C, 0x54, 0x54, 0x74, 0x00, 0x00 }, // Code for char s
	{ 0x04, 0x7C, 0x04, 0x04, 0x00, 0x00 }, // Code for char t
	{ 0x7C, 0x40, 0x40, 0x7C, 0x00, 0x00 }, // Code for char u
	{ 0x1C, 0x60, 0x60, 0x1C, 0x00, 0x00 }, // Code for char v
	{ 0x7C, 0x60, 0x10, 0x60, 0x7C, 0x00 }, // Code for char w
	{ 0x4C, 0x30, 0x30, 0x4C, 0x00, 0x00 }, // Code for char x
	{ 0x0C, 0x70, 0x0C, 0x00, 0x00, 0x00 }, // Code for char y
	{ 0x44, 0x64, 0x54, 0x4C, 0x00, 0x00 }, // Code for char z
	{ 0x10, 0x6C, 0x44, 0x00, 0x00, 0x00 }, // Code for char {
	{ 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00 }, // Code for char |
	{ 0x44, 0x6C, 0x10, 0x00, 0x00, 0x00 }, // Code for char }
	{ 0x10, 0x10, 0x20, 0x20, 0x10, 0x00 }, // Code for char ~
	{ 0x7C, 0x7C, 0x00, 0x00, 0x00, 0x00 }  // Code for char 
};
*/

/*void OLED_Set_Pos(unsigned char x, unsigned char y)
{
	OLED.writeCmd(0xb0 + y);
	OLED.writeCmd(((x & 0xf0) >> 4) | 0x10);
	OLED.writeCmd((x & 0x0f) | 0x00);
}*/

/*void OLED_Fill(unsigned char data)
{
	unsigned char y, x;

	for (y = 0; y < 8; y++)
	{
		OLED.writeCmd(0xb0 + y);
		OLED.writeCmd(0x00);
		OLED.writeCmd(0x10);
		for (x = 0; x < OLED_WIDTH; x++)
			OLED.writeData(data);
	}
}*/

/*void OLED_CLS(void)
{
	unsigned char x, y;

	for (y = 0; y < 8; y++)
	{
		OLED.writeCmd(0xb0 + y);
		OLED.writeCmd(0x00);
		OLED.writeCmd(0x10);

		for (x = 0; x < OLED_WIDTH; x++)
			OLED.writeData(0);
	}
}*/

/*void OLED_DLY_ms(unsigned int ms)
{
	unsigned int a;

	while(ms)
	{
		a = 6675;
		while(a--)
			ms--;
	}
	return;
	// time_delay_ms(ms);
}*/

/*void Set_Start_Column(unsigned char d)
{
	OLED.writeCmd(0x00 + d % 16); // Set Lower Column Start Address for Page Addressing Mode
								  // Default => 0x00
	OLED.writeCmd(0x10 + d / 16); // Set Higher Column Start Address for Page Addressing Mode
								  // Default => 0x10
}*/

/*void Set_Addressing_Mode(unsigned char d)
{
	OLED.writeCmd(0x20); // Set EEPROM Addressing Mode
	OLED.writeCmd(d);	 // Default => 0x02
						 // 0x00 => Horizontal Addressing Mode
						 // 0x01 => Vertical Addressing Mode
						 // 0x02 => Page Addressing Mode
}*/

/*void Set_Column_Address(unsigned char a, unsigned char b)
{
	OLED.writeCmd(0x21); // Set Column Address
	OLED.writeCmd(a);	 // Default => 0x00 (Column Start Address)
	OLED.writeCmd(b);	 // Default => 0x7F (Column End Address)
}*/

/*void Set_Page_Address(unsigned char a, unsigned char b)
{
	OLED.writeCmd(0x22); // Set Page Address
	OLED.writeCmd(a);	 // Default => 0x00 (Page Start Address)
	OLED.writeCmd(b);	 // Default => 0x07 (Page End Address)
}*/

/*void Set_Start_Line(unsigned char d)
{
	OLED.writeCmd(0x40 | d); // Set Display Start Line
						 	 // Default => 0x40 (0x00)
}*/

/*void Set_Contrast_Control(unsigned char d)
{
	OLED.writeCmd(0x81); // Set Contrast Control
	OLED.writeCmd(d);	 // Default => 0x7F
}*/

/*void Set_Charge_Pump(unsigned char d)
{
	OLED.writeCmd(0x8D);	 // Set Charge Pump
	OLED.writeCmd(0x10 | d); // Default => 0x10
							 // 0x10 (0x00) => Disable Charge Pump
							 // 0x14 (0x04) => Enable Charge Pump
}*/

/*void Set_Segment_Remap(unsigned char d)
{
	OLED.writeCmd(0xA0 | d); // Set Segment Re-Map
							 // Default => 0xA0
							 // 0xA0 (0x00) => Column Address 0 Mapped to SEG0
							 // 0xA1 (0x01) => Column Address 0 Mapped to SEG127
}*/

/*void Set_Entire_Display(unsigned char d)
{
	OLED.writeCmd(0xA4 | d); // Set Entire Display On / Off
							 // Default => 0xA4
							 // 0xA4 (0x00) => Normal Display
							 // 0xA5 (0x01) => Entire Display On
}*/

/*void Set_Inverse_Display(unsigned char d)
{
	OLED.writeCmd(0xA6 | d); // Set Inverse Display On/Off
							 // Default => 0xA6
							 // 0xA6 (0x00) => Normal Display
							 // 0xA7 (0x01) => Inverse Display On
}*/

/*void Set_Multiplex_Ratio(unsigned char d)
{
	OLED.writeCmd(0xA8); // Set Multiplex Ratio
	OLED.writeCmd(d);	 // Default => 0x3F (1/64 Duty)
}*/

/*void Set_Display_On_Off(unsigned char d)
{
	OLED.writeCmd(0xAE | d); // Set Display On/Off
							 // Default => 0xAE
							 // 0xAE (0x00) => Display Off
							 // 0xAF (0x01) => Display On
}*/

/*void Set_Start_Page(unsigned char d)
{
	OLED.writeCmd(0xB0 | d); // Set Page Start Address for Page Addressing Mode
							 // Default => 0xB0 (0x00)
}*/

/*void Set_Common_Remap(unsigned char d)
{
	OLED.writeCmd(0xC0 | d); // Set COM Output Scan Direction
							 // Default => 0xC0
							 // 0xC0 (0x00) => Scan from COM0 to 63
							 // 0xC8 (0x08) => Scan from COM63 to 0
}*/

/*void Set_Display_Offset(unsigned char d)
{
	OLED.writeCmd(0xD3); // Set Display Offset
	OLED.writeCmd(d);	 // Default => 0x00
}*/

/*void Set_Display_Clock(unsigned char d)
{
	OLED.writeCmd(0xD5); // Set Display Clock Divide Ratio / Oscillator Frequency
	OLED.writeCmd(d);	 // Default => 0x80
						 // D[3:0] => Display Clock Divider
						 // D[7:4] => Oscillator Frequency
}*/

/*void Set_Precharge_Period(unsigned char d)
{
	OLED.writeCmd(0xD9); // Set Pre-Charge Period
	OLED.writeCmd(d);	 // Default => 0x22 (2 Display Clocks [Phase 2] / 2 Display Clocks [Phase 1])
						 // D[3:0] => Phase 1 Period in 1~15 Display Clocks
						 // D[7:4] => Phase 2 Period in 1~15 Display Clocks
}*/

/*void Set_Common_Config(unsigned char d)
{
	OLED.writeCmd(0xDA);	 // Set COM Pins Hardware Configuration
	OLED.writeCmd(0x02 | d); // Default => 0x12 (0x10)
							 // Alternative COM Pin Configuration
							 // Disable COM Left/Right Re-Map
}*/

/*void Set_VCOMH(unsigned char d)
{
	OLED.writeCmd(0xDB); // Set VCOMH Deselect Level
	OLED.writeCmd(d);	 // Default => 0x20 (0.77*VCC)
}*/

/*void Set_NOP(void)
{
	OLED.writeCmd(0xE3); // Command for No Operation
}*/

/*void OLED_Init(void)
{
	unsigned char i;
	OLED.initPins();
	//OLED_PORT = 0X0F;
	//OLED_SCLH;
	//OLED_RSTL;
	digitalWrite(SCL_PIN, HIGH);
	digitalWrite(RST_PIN, LOW);
	//for(i = 0; i < 100; i++) asm("nop");
	delay(50);
	//OLED_RSTH;
	digitalWrite(RST_PIN, HIGH);

	OLED.setDisplayOnOff(0x00);   	// Display Off (0x00/0x01)
	OLED.setDisplayClock(0x80);		// Set Clock as 100 Frames/Sec
	OLED.setMultiplexRatio(0x3F);  	// 1/64 Duty (0x0F~0x3F)
	OLED.setDisplayOffset(0x00);   	// Shift Mapping RAM Counter (0x00~0x3F)
	OLED.setStartLine(0x00);			// Set Mapping RAM Display Start Line (0x00~0x3F)
	OLED.setChargePump(0x04);			// Enable Embedded DC/DC Converter (0x00/0x04)
	OLED.setAddressingMode(0x00);		// Set Page Addressing Mode (0x00/0x01/0x02)
	OLED.setSegmentRemap(0x01);		// Set SEG/Column Mapping
	OLED.setColumnAddress(0x00, 0x7F);
	OLED.setPageAddress(0x00, 0x07);
	OLED.setCommonRemap(0x08);			// Set COM/Row Scan Direction
	OLED.setCommonConfig(0x10);		// Set Sequential Configuration (0x00/0x10)
	OLED.setContrastControl(0xCF); 	// Set SEG Output Current
	OLED.setPrechargePeriod(0xF1); 	// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	OLED.setVCOMH(0x40);				// Set VCOM Deselect Level
	OLED.setEntireDisplay(0x00);   	// Disable Entire Display On (0x00/0x01)
	OLED.setInverseDisplay(0x00);  	// Disable Inverse Display On (0x00/0x01)
	OLED.setDisplayOnOff(0x01);   	// Display On (0x00/0x01)
	OLED.fill(0x00);				// Clear all
	OLED.setPosition(0, 0);			// Top left
	//OLED_SetFont("Shard_6x8");
}*/

/*void OLED_SetFont(unsigned char ch[])
{
	unsigned char font;

	switch(ch) {
		case "F6x8":
			font = F6x8;
			break;
		case "Shard_6x8":
			font = Shard_6x8;
			break;
		default:
			font = Shard_6x8;
			break;
	}
}*/

/*void OLED_P6x8Char(unsigned char x, unsigned char y, unsigned char ch)
{
	unsigned char c = 0, i = 0, j = 0;

	c = ch - 32;
	if (x > 122)
	{
		x = 0;
		y++;
	}
	OLED.setPosition(x, y);
	for (i = 0; i < 6; i++)
		OLED.writeData(pgm_read_byte(&(Shard_6x8[c][i])));
}*/

/*void OLED_P6x8Str(unsigned char x, unsigned char y, char ch[])
{
	unsigned char c = 0, i = 0, j = 0;
	while (ch[j] != '\0')
	{
		c = ch[j] - 32;
		if (x > OLED_WIDTH)
		{
			x = 0;
			y++;
		}
		OLED.setPosition(x, y);
		for (i = 0; i < 6; i++)
			OLED.writeData(pgm_read_byte(&(Shard_6x8[c][i])));

		x += 6;
		j++;
	}
}*/

/*void OLED_P6x8Single(unsigned char x, unsigned char y, char ch)
{
	unsigned char c = 0, i = 0, j = 0;
	if(ch != '\0')
	{
		c = ch - 32;
		if (x > OLED_WIDTH)
		{
			x = 0;
			y++;
		}
		OLED.setPosition(x, y);
		for (i = 0; i < 6; i++)
			OLED.writeData(pgm_read_byte(&(Shard_6x8[c][i])));

		x += 6;
	}
}*/

/*void OLED_P8x8Str(unsigned char x, unsigned char y, char ch[])
{
	unsigned char c = 0, i = 0, j = 0;
	while (ch[j] != '\0')
	{
		c = ch[j] - 32;
		if (x > OLED_WIDTH - 8)
		{
			x = 0;
			y++;
		}
		OLED.setPosition(x, y);
		for (i = 0; i < 8; i++)
			OLED.writeData(pgm_read_byte(&(Sheikah_8x8[c][i])));

		x += 9;
		j++;
	}
}*/

// DO NOT DELETE!!!
/*void OLED_P8x16Str(unsigned char x, unsigned char y, char ch[])
{
	unsigned char c = 0, i = 0, j = 0;
	while (ch[j] != '\0')
	{
		c = ch[j] - 32;
		if (x > 120)
		{
			x = 0;
			y++;
		}
		OLED.setPosition(x, y);
		for (i = 0; i < 8; i++)
		{
			OLED.writeData(F8X16[(c << 4) + i]);
		}
		OLED.setPosition(x, y + 1);
		for (i = 0; i < 8; i++)
		{
			OLED.writeData(F8X16[(c << 4) + i + 8]);
		}
		x += 8;
		j++;
	}
}*/

// Draw bitmap image using a char array
/*void OLED_DrawBMP(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1, unsigned char bmp[])
{ 	
	int i = 0;
	unsigned char x, y;
	y1 /= 8;

	for(y = y0; y < y1; y++)
	{
		OLED.setPosition(x0, y);				
		for(x = x0; x < x1; x++)
		{
			OLED.writeData(bmp[i++]);
		}
	}
}*/

// Draw full screen (128x64px) bitmap image using a 2D char array (add curly braces around each of 8 sets of 128 bytes)
/*void OLED_DrawFullScreenBMP(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1, unsigned char bmp[][128])
{
	unsigned char x, y;
	y1 /= 8;

	for(y = y0; y < y1; y++)
	{
		OLED.setPosition(x0, y);
		for(x = x0; x < x1; x++)
		{
			OLED.writeData(bmp[y][x]);
		}
	}
}*/

/*void OLED_PrintValueC(unsigned char x, unsigned char y, char data)
{
	unsigned char i, j, k;
	if (data < 0)
	{
		OLED.print6x8Char(x, y, '-');
		data = -data;
	}
	else
		OLED.print6x8Char(x, y, '+');

	i = data / 100;
	j = (data % 100) / 10;
	k = data % 10;
	OLED.print6x8Char(x + 6, y, i + 48);
	OLED.print6x8Char(x + 12, y, j + 48);
	OLED.print6x8Char(x + 18, y, k + 48);
}*/

/*void OLED_PrintValueI(unsigned char x, unsigned char y, int data)
{
	unsigned char i, j, k, l, m;
	if (data < 0)
	{
		OLED.print6x8Char(x, y, '-');
		data = -data;
	}
	else
		OLED.print6x8Char(x, y, '+');

	l = data / 10000;
	m = (data % 10000) / 1000;
	i = (data % 1000) / 100;
	j = (data % 100) / 10;
	k = data % 10;
	OLED.print6x8Char(x + 6, y, l + 48);
	OLED.print6x8Char(x + 12, y, m + 48);
	OLED.print6x8Char(x + 18, y, i + 48);
	OLED.print6x8Char(x + 24, y, j + 48);
	OLED.print6x8Char(x + 30, y, k + 48);
}*/

/*void OLED_PrintValueFP(unsigned char x, unsigned char y, unsigned int data, unsigned char num)
{
	unsigned char m, i, j, k;
	OLED.print6x8Char(x, y, '.');
	m = data / 1000;
	i = (data % 1000) / 100;
	j = (data % 100) / 10;
	k = data % 10;
	switch (num)
	{
	case 1:
		OLED.print6x8Char(x + 6, y, k + 48);
		break;
	case 2:
		OLED.print6x8Char(x + 6, y, j + 48);
		OLED.print6x8Char(x + 12, y, k + 48);
		break;
	case 3:
		OLED.print6x8Char(x + 6, y, i + 48);
		OLED.print6x8Char(x + 12, y, j + 48);
		OLED.print6x8Char(x + 18, y, k + 48);
		break;
	case 4:
		OLED.print6x8Char(x + 6, y, m + 48);
		OLED.print6x8Char(x + 12, y, i + 48);
		OLED.print6x8Char(x + 18, y, j + 48);
		OLED.print6x8Char(x + 24, y, k + 48);
		break;
	}
}*/

/*void OLED_PrintValueF(unsigned char x, unsigned char y, float data, unsigned char num)
{
	unsigned char l, m, i, j, k;
	unsigned char databiti = 6;
	unsigned int tempdataui = 0;
	int tempdataii = (int)data;
	long int tempdatalp = (long int)((data - (int)data) * 10000);

	if (data < 0.0000001)
		OLED.print6x8Char(x, y, '-');
	else
		OLED.print6x8Char(x, y, '+');
	if (tempdataii < 0)
		tempdataii = -tempdataii;
	tempdataui = tempdataii;
	l = tempdataui / 10000;
	m = (tempdataui % 10000) / 1000;
	i = (tempdataui % 1000) / 100;
	j = (tempdataui % 100) / 10;
	k = tempdataui % 10;
	if (l != 0)
	{
		OLED.print6x8Char(x + 6, y, l + 48);
		OLED.print6x8Char(x + 12, y, m + 48);
		OLED.print6x8Char(x + 18, y, i + 48);
		OLED.print6x8Char(x + 24, y, j + 48);
		OLED.print6x8Char(x + 30, y, k + 48);
	}
	else if (m != 0)
	{
		databiti = 5;
		OLED.print6x8Char(x + 6, y, m + 48);
		OLED.print6x8Char(x + 12, y, i + 48);
		OLED.print6x8Char(x + 18, y, j + 48);
		OLED.print6x8Char(x + 24, y, k + 48);
	}
	else if (i != 0)
	{
		databiti = 4;
		OLED.print6x8Char(x + 6, y, i + 48);
		OLED.print6x8Char(x + 12, y, j + 48);
		OLED.print6x8Char(x + 18, y, k + 48);
	}
	else if (j != 0)
	{
		databiti = 3;
		OLED.print6x8Char(x + 6, y, j + 48);
		OLED.print6x8Char(x + 12, y, k + 48);
	}
	else
	{
		databiti = 2;
		OLED.print6x8Char(x + 6, y, k + 48);
	}
	if (tempdatalp < 0)
		tempdatalp = -tempdatalp;
	switch (num)
	{
		case 0:
			break;
		case 1:
			OLED_PrintValueFP(x + databiti * 6, y, (unsigned int)(tempdatalp / 1000), num);
			break;
		case 2:
			OLED_PrintValueFP(x + databiti * 6, y, (unsigned int)(tempdatalp / 100), num);
			break;
		case 3:
			OLED_PrintValueFP(x + databiti * 6, y, (unsigned int)(tempdatalp / 10), num);
			break;
		case 4:
			OLED_PrintValueFP(x + databiti * 6, y, (unsigned int)(tempdatalp), num);
			break;
	}
}*/

/*void OLED_Cursor(unsigned char selector_column, unsigned char selector_row)
{
	if (selector_row != 0)
	{
		if (selector_column == 1)
			OLED.setPosition(0, selector_row + 2);
		else
			OLED.setPosition(80 + (selector_column - 2) * 6, selector_row + 2);
		OLED.writeData(0xFF);
		OLED.writeData(0xFF);
		OLED.writeData(0xFF);
		OLED.writeData(0xFF);
		OLED.writeData(0xFF);
		OLED.writeData(0xFF);
	}
}*/

/*void OLED_PrintSheikahMap()
{
	OLED.print8x8Str(6, 0, "A");
	OLED.print8x8Str(24, 0, "B");
	OLED.print8x8Str(42, 0, "C");
	OLED.print8x8Str(60, 0, "D");
	OLED.print8x8Str(78, 0, "E");
	OLED.print8x8Str(96, 0, "F");
	OLED.print8x8Str(114, 0, "G");

	OLED.print8x8Str(6, 1, "H");
	OLED.print8x8Str(24, 1, "I");
	OLED.print8x8Str(42, 1, "J");
	OLED.print8x8Str(60, 1, "K");
	OLED.print8x8Str(78, 1, "L");
	OLED.print8x8Str(96, 1, "M");
	OLED.print8x8Str(114, 1, "N");

	OLED.print8x8Str(6, 2, "O");
	OLED.print8x8Str(24, 2, "P");
	OLED.print8x8Str(42, 2, "Q");
	OLED.print8x8Str(60, 2, "R");
	OLED.print8x8Str(78, 2, "S");
	OLED.print8x8Str(96, 2, "T");
	OLED.print8x8Str(114, 2, "U");

	OLED.print8x8Str(6, 3, "V");
	OLED.print8x8Str(24, 3, "W");
	OLED.print8x8Str(42, 3, "X");
	OLED.print8x8Str(60, 3, "Y");
	OLED.print8x8Str(78, 3, "Z");
	OLED.print8x8Str(96, 3, " ");
	OLED.print8x8Str(114, 3, ".");
}*/

/*void OLED_Set_Selector(unsigned char x, unsigned char y)
{
	unsigned char c = 0, i = 0, j = 0;

	OLED.clearPrevSelector();

	if (x > 114)
	{
		x = 0;
		y++;
	}
	OLED.setPosition(x, y);
	for (i = 0; i < 6; i++)
		OLED.writeData(pgm_read_byte(&(Selector[i])));
}*/

/*void OLED_Set_Selector_Pos(int x, int y)
{
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Sheikah Map Character Positions:
	 * +---------------------------------------------------------------------+
	 * | A(0, 0) | B(1, 0) | C(2, 0) | D(3, 0) | E(4, 0) | F(5, 0) | G(6, 0) |
	 * | H(0, 1) | I(1, 1) | J(2, 1) | K(3, 1) | L(4, 1) | M(5, 1) | N(6, 1) |
	 * | O(0, 2) | P(1, 2) | Q(2, 2) | R(3, 2) | S(4, 2) | T(5, 2) | U(6, 2) |
	 * | V(0, 3) | W(1, 3) | X(2, 3) | Y(3, 3) | Z(4, 3) |  (5, 3) | .(6, 3) |
	 * +---------------------------------------------------------------------+
	 * 
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	/*prevSelectorPosX = selectorPosX;
	prevSelectorPosY = selectorPosY;
	if(x > 6) {
		prevSelectorPosX = 0;
		x = 0;
	}
	else if(x < 0) {
		prevSelectorPosX = 6;
		x = 6;
	}
	
	if(y > 3) {
		prevSelectorPosY = 0;
		y = 0;
	}
	else if(y < 0) {
		prevSelectorPosY = 3;
		y = 3;
	}
	selectorPosX = x;
	selectorPosY = y;
	OLED.setSelector(selectorPosX * 18, selectorPosY);
}*/

/*void OLED_Clear_Prev_Selector()
{
	int i = 0;

	OLED.setPosition(prevSelectorPosX * 18, prevSelectorPosY);

	for (i = 0; i < 6; i++)
		OLED.writeData(pgm_read_byte(&(SelectorBlank[i])));
}*/

/*unsigned char OLED_Get_Selected_Char()
{
	if(selectorPosX == 0 && selectorPosY == 0) selectedChar = pgm_read_byte(&(SheikahChars[0])); // = "A";
	else if(selectorPosX == 1 && selectorPosY == 0) selectedChar = pgm_read_byte(&(SheikahChars[1])); // = "B";
	else if(selectorPosX == 2 && selectorPosY == 0) selectedChar = pgm_read_byte(&(SheikahChars[2])); // = "C";
	else if(selectorPosX == 3 && selectorPosY == 0) selectedChar = pgm_read_byte(&(SheikahChars[3])); // = "D";
	else if(selectorPosX == 4 && selectorPosY == 0) selectedChar = pgm_read_byte(&(SheikahChars[4])); // = "E";
	else if(selectorPosX == 5 && selectorPosY == 0) selectedChar = pgm_read_byte(&(SheikahChars[5])); // = "F";
	else if(selectorPosX == 6 && selectorPosY == 0) selectedChar = pgm_read_byte(&(SheikahChars[6])); // = "G";
	else if(selectorPosX == 0 && selectorPosY == 1) selectedChar = pgm_read_byte(&(SheikahChars[7])); // = "H";
	else if(selectorPosX == 1 && selectorPosY == 1) selectedChar = pgm_read_byte(&(SheikahChars[8])); // = "I";
	else if(selectorPosX == 2 && selectorPosY == 1) selectedChar = pgm_read_byte(&(SheikahChars[9])); // = "J";
	else if(selectorPosX == 3 && selectorPosY == 1) selectedChar = pgm_read_byte(&(SheikahChars[10])); // = "K";
	else if(selectorPosX == 4 && selectorPosY == 1) selectedChar = pgm_read_byte(&(SheikahChars[11])); // = "L";
	else if(selectorPosX == 5 && selectorPosY == 1) selectedChar = pgm_read_byte(&(SheikahChars[12])); // = "M";
	else if(selectorPosX == 6 && selectorPosY == 1) selectedChar = pgm_read_byte(&(SheikahChars[13])); // = "N";
	else if(selectorPosX == 0 && selectorPosY == 2) selectedChar = pgm_read_byte(&(SheikahChars[14])); // = "O";
	else if(selectorPosX == 1 && selectorPosY == 2) selectedChar = pgm_read_byte(&(SheikahChars[15])); // = "P";
	else if(selectorPosX == 2 && selectorPosY == 2) selectedChar = pgm_read_byte(&(SheikahChars[16])); // = "Q";
	else if(selectorPosX == 3 && selectorPosY == 2) selectedChar = pgm_read_byte(&(SheikahChars[17])); // = "R";
	else if(selectorPosX == 4 && selectorPosY == 2) selectedChar = pgm_read_byte(&(SheikahChars[18])); // = "S";
	else if(selectorPosX == 5 && selectorPosY == 2) selectedChar = pgm_read_byte(&(SheikahChars[19])); // = "T";
	else if(selectorPosX == 6 && selectorPosY == 2) selectedChar = pgm_read_byte(&(SheikahChars[20])); // = "U";
	else if(selectorPosX == 0 && selectorPosY == 3) selectedChar = pgm_read_byte(&(SheikahChars[21])); // = "V";
	else if(selectorPosX == 1 && selectorPosY == 3) selectedChar = pgm_read_byte(&(SheikahChars[22])); // = "W";
	else if(selectorPosX == 2 && selectorPosY == 3) selectedChar = pgm_read_byte(&(SheikahChars[23])); // = "X";
	else if(selectorPosX == 3 && selectorPosY == 3) selectedChar = pgm_read_byte(&(SheikahChars[24])); // = "Y";
	else if(selectorPosX == 4 && selectorPosY == 3) selectedChar = pgm_read_byte(&(SheikahChars[25])); // = "Z";
	else if(selectorPosX == 5 && selectorPosY == 3) selectedChar = pgm_read_byte(&(SheikahChars[26])); // = " ";
	else if(selectorPosX == 6 && selectorPosY == 3) selectedChar = pgm_read_byte(&(SheikahChars[27])); // = ".";

	return selectedChar;
}*/

/*void OLED_Move_Selector()
{
	// Up
	if(digitalRead(BTN_UP_PIN) == HIGH) {
		// Store prevSelectorPosY
		prevSelectorPosY = selectorPosY;
		// Decrement selectorPosY
		if(selectorPosY < 0) {
			selectorPosY = 3;
			prevSelectorPosY = 0;
		}
		else
			selectorPosY--;

		OLED.clearPrevSelector();
		OLED.setSelectorPos(selectorPosX, selectorPosY);
		delay(45);
	}

	// Down
	if(digitalRead(BTN_DOWN_PIN) == HIGH) {
		// Store prevSelectorPosY
		prevSelectorPosY = selectorPosY;
		// Increment selectorPosY
		if(selectorPosY > 3) {
			selectorPosY = 0;
			prevSelectorPosY = 3;
		}
		else
			selectorPosY++;

		OLED.clearPrevSelector();
		OLED.setSelectorPos(selectorPosX, selectorPosY);
		delay(45);
	}

	// Left
	if(digitalRead(BTN_LEFT_PIN) == HIGH) {
		// Store prevSelectorPosX
		prevSelectorPosX = selectorPosX;
		// Decrement selectorPosX
		if(selectorPosX < 0) {
			selectorPosX = 6;
			prevSelectorPosX = 0;
		}
		else
			selectorPosX--;

		OLED.clearPrevSelector();
		OLED.setSelectorPos(selectorPosX, selectorPosY);
		delay(45);
	}

	// Right
	if(digitalRead(BTN_RIGHT_PIN) == HIGH) {
		// Store prevSelectorPosX
		prevSelectorPosX = selectorPosX;
		// Increment selectorPosX
		if(selectorPosX > 6) {
			selectorPosX = 0;
			prevSelectorPosX = 6;
		}
		else
			selectorPosX++;

		OLED.clearPrevSelector();
		OLED.setSelectorPos(selectorPosX, selectorPosY);
		delay(45);
	}

	// A
	if(digitalRead(BTN_A_PIN) == HIGH) {
		// Store prevCursorPosX
		prevCursorPosX = cursorPosX - 1;
		// Increment selectorPosX
		if(cursorPosX > 19) {
			cursorPosX = 1;
			prevCursorPosX = 19;
		}
		else {
			cursorPosX++;
		}
		//OLED_Clear_Prev_Cursor();
		OLED.setCursorPos(cursorPosX, cursorPosY);
		OLED.print6x8Single(prevCursorPosX * 6, 7, OLED_Get_Selected_Char());
		//cursorPosX++;
		//OLED.setCursor(cursorPosX * 6, 7);
		delay(45);
	}

	// B
	if(digitalRead(BTN_B_PIN) == HIGH) {
		//OLED.clearLine();
		OLED.backspace();
		
		// Store prevCursorPosX
		prevCursorPosX = cursorPosX + 1;
		
		delay(45);
	}

	/*OLED.print6x8Str(0, 4, "CursorX: ");
	OLED.printValueI(67, 4, cursorPosX);
	OLED.print6x8Str(0, 5, "pCursorX: ");
	OLED.printValueI(67, 5, prevCursorPosX);*/

	/*OLED.print6x8Str(0, 4, "SelectorX: ");
	OLED.printValueI(67, 4, selectorPosX);
	OLED.print6x8Str(0, 5, "SelectorY: ");
	OLED.printValueI(67, 5, selectorPosY);*/

	/*OLED.print6x8Str(0, 4, "Selected Char: [");
	OLED.print6x8Single(96, 4, OLED_Get_Selected_Char());
	OLED.print6x8Str(102, 4, "]");
	
	OLED.print6x8Str(0, 7, ">");*/

	/*OLED.print6x8Str(0, 6, "PreviousX: ");
	OLED.printValueI(67, 6, prevSelectorPosX);
	OLED.print6x8Str(0, 7, "PreviousY: ");
	OLED.printValueI(67, 7, prevSelectorPosY);*//*
}*/

/*void OLED_Set_Cursor(unsigned char x, unsigned char y)
{
	unsigned char c = 0, i = 0, j = 0;

	//OLED_Clear_Prev_Cursor();

	if (x > OLED_WIDTH - 6)
	{
		x = 7;
		y++;
	}
	OLED.setPosition(x, y);
	for (i = 0; i < 6; i++)
		OLED.writeData(pgm_read_byte(&(Cursor[i])));
}*/

/*void OLED_Set_Cursor_Pos(int x, int y)
{
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Sheikah Map Character Positions:
	 * +---------------------------------------------------------------------+
	 * | A(0, 0) | B(1, 0) | C(2, 0) | D(3, 0) | E(4, 0) | F(5, 0) | G(6, 0) |
	 * | H(0, 1) | I(1, 1) | J(2, 1) | K(3, 1) | L(4, 1) | M(5, 1) | N(6, 1) |
	 * | O(0, 2) | P(1, 2) | Q(2, 2) | R(3, 2) | S(4, 2) | T(5, 2) | U(6, 2) |
	 * | V(0, 3) | W(1, 3) | X(2, 3) | Y(3, 3) | Z(4, 3) |  (5, 3) | .(6, 3) |
	 * +---------------------------------------------------------------------+
	 * 
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	/*prevCursorPosX = cursorPosX - 1;
	prevCursorPosY = cursorPosY - 1;
	if(x > 19) {
		prevCursorPosX = 19;
		x = 1;
	}
	/*if(x > 21) {
		prevCursorPosX = 0;
		x = 0;
	}
	else if(x < 0) {
		prevCursorPosX = 6;
		x = 6;
	}
	
	if(y > 3) {
		prevCursorPosY = 0;
		y = 0;
	}
	else if(y < 0) {
		prevCursorPosY = 3;
		y = 3;
	}*/
	/*cursorPosX = x;
	cursorPosY = y;
	OLED.setCursor(cursorPosX * 6, cursorPosY);
}*/

/*void OLED_Clear_Prev_Cursor()
{
	int i = 0;

	OLED.setPosition(prevCursorPosX * 6, prevCursorPosY);

	for (i = 0; i < 6; i++)
		OLED.writeData(pgm_read_byte(&(CursorBlank[i])));
}*/

/*void OLED_Clear_Line()
{
	int i = 0, j = 0;

	OLED.setPosition(6, 7);

	for(j = 0; j < 120; j+=6)
	{
		for (i = 0; i < 6; i++)
			OLED.writeData(pgm_read_byte(&(CursorBlank[i])));
	}

	cursorPosX = 1;
	OLED.setCursor(cursorPosX * 6, cursorPosY);
}*/

/*void OLED_Backspace()
{
	int i = 0;

	OLED.setPosition(cursorPosX * 6, 7);

	for (i = 0; i < 6; i++)
		OLED.writeData(pgm_read_byte(&(CursorBlank[i])));

	if(cursorPosX < 2)
		cursorPosX = 1;
	else
	{
		prevCursorPosX++;
		//OLED_Clear_Prev_Cursor();
		cursorPosX--;
		prevCursorPosX--;
	}
	OLED.setCursor(cursorPosX * 6, cursorPosY);
}*/

/*void OLED_Terminal_Intput()
{
	//unsigned char buffer[] = { 0, 7 };
	
	OLED.print6x8Str(0, 7, "> ");

	while(1)
	{
		OLED.print6x8Single(cursorPosX, 7, OLED_Get_Selected_Char());
		cursorPosX += 6;
	}
}*/

/*void OLED_SelectorPixel(unsigned char selectorX, unsigned char selectorY)
{
	OLED.setPosition(selectorX, selectorY);

	for(int i = 0; )
	OLED.writeData(pgm_read_byte(&(Selector[i])));
	OLED.writeData(0x00);
	OLED.writeData(0x3E);
	OLED.writeData(0x1C);
	OLED.writeData(0x08);
	OLED.writeData(0x00);
	OLED.writeData(0x00);
	OLED.writeData(0x00);
}*/


/*void EEPROM_TestSetup()
{
	unsigned char testData[] = "Fuck this bullshit! Fuck this!"; // Data to write

	Wire.begin();
	Serial.begin(9600);
	EEPROM.writePage(0x50, 0, (unsigned char*)testData, sizeof(testData)); // Write to EEPROM

	delay(100); // Add a small delay (1/10th of a second)

	Serial.println(F("Data was successfully written to memory (EEPROM)!"));
}

void EEPROM_TestLoop()
{
	int addr = 0; // First address
	unsigned char b = EEPROM.readByte(0x50, 0); // Access the first address from memory

	while(b != -1)
	{
		Serial.print(F("Data from memory address ["));
		Serial.print(addr);
		Serial.print(F("]: "));
		Serial.print((char)b); // Print data to the Serial Port
		Serial.println(F(" ")); // Newline
		addr++; // Next address
		b = EEPROM.readByte(0x50, addr); // Access the next address from memory
	}

	Serial.println(F(" ")); // Newline
	delay(2000); // 2 second delay
}*/


void setup()
{
	//OLED.initPins(); // Called in OLED.initDisplay()
	OLED.initDisplay();

	//Wire.begin();
	//Serial.begin(9600);
	//while(!Serial);

	//OLED.printValueI(0, 3, sizeof(Shard_6x8));
	//Serial.println(F("Data was successfully written to memory (EEPROM)!"), sizeof(SheikahEyeSplash));
	
	/*EEPROM.writeBitmap(0x50, 0, SheikahEyeSplash, sizeof(SheikahEyeSplash));
	delay(100);
	Serial.println(F("Data was successfully written to memory (EEPROM)!"));
	*/

	//OLED.print6x8Str(0, 3, "Data was successfully written to memory (EEPROM)!");

	/*unsigned char bitmapArray[1024];
	int addr0 = 0;
	int i = 0;

	for(i = 0; i < 28; i++)
	{
		bitmapArray[i] = EEPROM.readByte(0x50, addr0);
		addr0++;
	}*/

	//unsigned char receivedArray = EEPROM.loadBitmap(0x50, 0, 1024);
	//OLED.drawBitmap(0, 0, OLED_WIDTH, OLED_HEIGHT, EEPROM.loadBitmap(0x50, 0, sizeof(SheikahEyeSplash)));

	OLED.loadSplash();
	OLED.loadTitle();
	
	//OLED.drawBitmap(32, 0, 96, OLED_HEIGHT, Mickey);
	//delay(10000); //15000

	/*OLED.drawLine(0, 35, 127, 35);
	OLED.drawLine(0, 54, 127, 54);
	OLED.flushBuffer();
	OLED.setSelectorPos(OLED.selectorPosX, OLED.selectorPosY);
	OLED.setCursor(OLED.cursorPosX * 6, OLED.cursorPosY);*/


	/*
	OLED.print6x8Str(0, 0, "Graphics test..");
	delay(2000);
	OLED.clearBuffer();

	// Draw pixel
	OLED.print6x8Str(0, 0, "Draw pixel..");
	delay(2000);
	OLED.clearBuffer();
	OLED.drawPixel(8, 8);
	OLED.flushBuffer();
	delay(2000);
	OLED.clearBuffer();

	// Draw line
	OLED.print6x8Str(0, 0, "Draw line..");
	delay(2000);
	OLED.clearBuffer();
	OLED.drawLine(0, 54, 127, 54);
	OLED.flushBuffer();
	delay(2000);
	OLED.clearBuffer();

	// Draw rectangle
	OLED.print6x8Str(0, 0, "Draw rectangle..");
	delay(2000);
	OLED.clearBuffer();
	OLED.drawRect(16, 16, 80, 60);
	OLED.flushBuffer();
	delay(2000);
	OLED.clearBuffer();

	// Draw circle
	OLED.print6x8Str(0, 0, "Draw circle..");
	delay(2000);
	OLED.clearBuffer();
	OLED.drawCircle(96, 50, 10);
	OLED.flushBuffer();
	delay(2000);
	OLED.clearBuffer();*/

	/*for(unsigned char i = 0; i < 1024; i++)
	{
        for(unsigned char x = 0; x < 16; x++)
		{
            OLED.writeData(OLED.pattern1[x]); //0x81
            i++;
			//delay(100);
        }
        i--;
    }*/
	//OLED.fill(OLED.pattern1);
	//OLED.fill(OLED.pattern2);

	//EEPROM_TestSetup();
	//EEPROM_TestLoop();
}

void loop()
{
	//OLED.printSheikahMap();
	OLED.displayMenu();
	OLED.moveSelector();

	//EEPROM_TestLoop();
}
